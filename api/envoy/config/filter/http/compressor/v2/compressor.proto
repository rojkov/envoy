syntax = "proto3";

package envoy.config.filter.http.compressor.v2;

option java_outer_classname = "CompressorProto";
option java_multiple_files = true;
option java_package = "io.envoyproxy.envoy.config.filter.http.compressor.v2";
option go_package = "v2";

import "google/protobuf/wrappers.proto";

import "validate/validate.proto";
import "gogoproto/gogo.proto";

// [#protodoc-title: Compressor]

message Compressor {

  // Minimum response length, in bytes, which will trigger compression. The default value is 30.
  google.protobuf.UInt32Value content_length = 1 [(validate.rules).uint32.gte = 30];

  // Set of strings that allows specifying which mime-types yield compression; e.g.,
  // application/json, text/html, etc. When this field is not defined, compression will be applied
  // to the following mime-types: "application/javascript", "application/json",
  // "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml".
  repeated string content_type = 2 [(validate.rules).repeated = {max_items: 50}];

  // If true, disables compression when the response contains an etag header. When it is false, the
  // filter will preserve weak etags and remove the ones that require strong validation.
  bool disable_on_etag_header = 3;

  // If true, removes accept-encoding from the request headers before dispatching it to the upstream
  // so that responses do not get compressed before reaching the filter.
  bool remove_accept_encoding_header = 4;

  // TODO(rojkov): replace it with `disable_response_compression` and `enable_request_compression`
  enum CompressionDirection {
    DEFAULT = 0;
    RESPONSE = 1;
    REQUEST = 2;
    RESPONSE_AND_REQUEST = 3;
  }

  // A value used to set the direction of compression. The default value is to compress
  // HTTP response bodies only.
  CompressionDirection compression_direction = 5;
}
