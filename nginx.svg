<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="214.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="197" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="197" > </text>
<g id="frames">
<g >
<title>crc32_z (628 samples, 3.33%)</title><rect x="778.1" y="133" width="39.3" height="15.0" fill="rgb(244,78,21)" rx="2" ry="2" />
<text  x="781.11" y="143.5" >crc..</text>
</g>
<g >
<title>ngx_http_rewrite_handler (3 samples, 0.02%)</title><rect x="601.6" y="117" width="0.2" height="15.0" fill="rgb(241,15,0)" rx="2" ry="2" />
<text  x="604.57" y="127.5" ></text>
</g>
<g >
<title>pqdownheap.constprop.0 (64 samples, 0.34%)</title><rect x="1016.9" y="133" width="4.0" height="15.0" fill="rgb(217,211,27)" rx="2" ry="2" />
<text  x="1019.89" y="143.5" ></text>
</g>
<g >
<title>nginx (18,848 samples, 100.00%)</title><rect x="10.0" y="149" width="1180.0" height="15.0" fill="rgb(232,157,24)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >nginx</text>
</g>
<g >
<title>ngx_http_parse_header_line (2 samples, 0.01%)</title><rect x="1014.4" y="133" width="0.1" height="15.0" fill="rgb(221,190,34)" rx="2" ry="2" />
<text  x="1017.39" y="143.5" ></text>
</g>
<g >
<title>ngx_http_test_content_type (2 samples, 0.01%)</title><rect x="109.9" y="85" width="0.1" height="15.0" fill="rgb(218,30,52)" rx="2" ry="2" />
<text  x="112.86" y="95.5" ></text>
</g>
<g >
<title>ngx_linux_sendfile_chain (3 samples, 0.02%)</title><rect x="159.3" y="101" width="0.2" height="15.0" fill="rgb(207,70,14)" rx="2" ry="2" />
<text  x="162.32" y="111.5" ></text>
</g>
<g >
<title>check_match.isra.0 (241 samples, 1.28%)</title><rect x="207.9" y="117" width="15.1" height="15.0" fill="rgb(247,102,15)" rx="2" ry="2" />
<text  x="210.90" y="127.5" ></text>
</g>
<g >
<title>[unknown] (2,389 samples, 12.68%)</title><rect x="10.0" y="117" width="149.6" height="15.0" fill="rgb(236,21,4)" rx="2" ry="2" />
<text  x="13.00" y="127.5" >[unknown]</text>
</g>
<g >
<title>_int_malloc (10 samples, 0.05%)</title><rect x="608.5" y="133" width="0.6" height="15.0" fill="rgb(242,33,53)" rx="2" ry="2" />
<text  x="611.51" y="143.5" ></text>
</g>
<g >
<title>longest_match (1,502 samples, 7.97%)</title><rect x="14.8" y="85" width="94.1" height="15.0" fill="rgb(211,95,22)" rx="2" ry="2" />
<text  x="17.82" y="95.5" >longest_match</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.02%)</title><rect x="608.1" y="133" width="0.2" height="15.0" fill="rgb(234,5,25)" rx="2" ry="2" />
<text  x="611.14" y="143.5" ></text>
</g>
<g >
<title>ngx_http_parse_status_line (3 samples, 0.02%)</title><rect x="601.0" y="117" width="0.2" height="15.0" fill="rgb(222,82,31)" rx="2" ry="2" />
<text  x="604.00" y="127.5" ></text>
</g>
<g >
<title>ngx_chain_update_chains (2 samples, 0.01%)</title><rect x="598.4" y="117" width="0.2" height="15.0" fill="rgb(224,34,20)" rx="2" ry="2" />
<text  x="601.43" y="127.5" ></text>
</g>
<g >
<title>epoll_wait (57 samples, 0.30%)</title><rect x="11.3" y="85" width="3.5" height="15.0" fill="rgb(235,184,44)" rx="2" ry="2" />
<text  x="14.25" y="95.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.07%)</title><rect x="10.0" y="85" width="0.8" height="15.0" fill="rgb(248,110,0)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>_tr_flush_block (9 samples, 0.05%)</title><rect x="162.3" y="117" width="0.5" height="15.0" fill="rgb(215,29,14)" rx="2" ry="2" />
<text  x="165.26" y="127.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="10.0" y="53" width="0.2" height="15.0" fill="rgb(225,111,8)" rx="2" ry="2" />
<text  x="13.00" y="63.5" ></text>
</g>
<g >
<title>ngx_vslprintf (4 samples, 0.02%)</title><rect x="1016.6" y="133" width="0.3" height="15.0" fill="rgb(249,31,25)" rx="2" ry="2" />
<text  x="1019.64" y="143.5" ></text>
</g>
<g >
<title>build_tree (57 samples, 0.30%)</title><rect x="651.6" y="133" width="3.6" height="15.0" fill="rgb(227,12,8)" rx="2" ry="2" />
<text  x="654.59" y="143.5" ></text>
</g>
<g >
<title>ngx_chain_update_chains (2 samples, 0.01%)</title><rect x="1013.5" y="133" width="0.1" height="15.0" fill="rgb(221,41,3)" rx="2" ry="2" />
<text  x="1016.45" y="143.5" ></text>
</g>
<g >
<title>ngx_http_chunked_body_filter (2 samples, 0.01%)</title><rect x="1014.1" y="133" width="0.1" height="15.0" fill="rgb(243,76,1)" rx="2" ry="2" />
<text  x="1017.08" y="143.5" ></text>
</g>
<g >
<title>ngx_http_create_request (2 samples, 0.01%)</title><rect x="10.2" y="53" width="0.1" height="15.0" fill="rgb(211,23,10)" rx="2" ry="2" />
<text  x="13.19" y="63.5" ></text>
</g>
<g >
<title>send_bits.constprop.0 (3 samples, 0.02%)</title><rect x="1187.8" y="133" width="0.2" height="15.0" fill="rgb(227,192,1)" rx="2" ry="2" />
<text  x="1190.81" y="143.5" ></text>
</g>
<g >
<title>ngx_http_script_flush_no_cacheable_variables (2 samples, 0.01%)</title><rect x="159.1" y="101" width="0.2" height="15.0" fill="rgb(223,24,47)" rx="2" ry="2" />
<text  x="162.13" y="111.5" ></text>
</g>
<g >
<title>ngx_strncasecmp (2 samples, 0.01%)</title><rect x="1016.5" y="133" width="0.1" height="15.0" fill="rgb(214,218,13)" rx="2" ry="2" />
<text  x="1019.46" y="143.5" ></text>
</g>
<g >
<title>ngx_process_events_and_timers (3 samples, 0.02%)</title><rect x="1016.1" y="133" width="0.2" height="15.0" fill="rgb(234,155,47)" rx="2" ry="2" />
<text  x="1019.14" y="143.5" ></text>
</g>
<g >
<title>ngx_http_copy_filter (2 samples, 0.01%)</title><rect x="599.2" y="117" width="0.1" height="15.0" fill="rgb(217,108,15)" rx="2" ry="2" />
<text  x="602.19" y="127.5" ></text>
</g>
<g >
<title>deflate_fast (3,721 samples, 19.74%)</title><rect x="223.7" y="117" width="232.9" height="15.0" fill="rgb(236,89,25)" rx="2" ry="2" />
<text  x="226.67" y="127.5" >deflate_fast</text>
</g>
<g >
<title>ngx_http_test_content_type (2 samples, 0.01%)</title><rect x="601.8" y="117" width="0.1" height="15.0" fill="rgb(250,100,10)" rx="2" ry="2" />
<text  x="604.82" y="127.5" ></text>
</g>
<g >
<title>ngx_http_log_handler (4 samples, 0.02%)</title><rect x="158.4" y="101" width="0.3" height="15.0" fill="rgb(220,33,39)" rx="2" ry="2" />
<text  x="161.44" y="111.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.02%)</title><rect x="133.6" y="101" width="0.3" height="15.0" fill="rgb(220,111,32)" rx="2" ry="2" />
<text  x="136.65" y="111.5" ></text>
</g>
<g >
<title>send_tree (30 samples, 0.16%)</title><rect x="1188.0" y="133" width="1.9" height="15.0" fill="rgb(222,69,29)" rx="2" ry="2" />
<text  x="1191.00" y="143.5" ></text>
</g>
<g >
<title>_tr_init (2 samples, 0.01%)</title><rect x="134.0" y="101" width="0.1" height="15.0" fill="rgb(239,228,53)" rx="2" ry="2" />
<text  x="136.96" y="111.5" ></text>
</g>
<g >
<title>deflate (5 samples, 0.03%)</title><rect x="223.0" y="117" width="0.4" height="15.0" fill="rgb(248,220,47)" rx="2" ry="2" />
<text  x="226.05" y="127.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (16 samples, 0.08%)</title><rect x="159.7" y="117" width="1.0" height="15.0" fill="rgb(254,225,28)" rx="2" ry="2" />
<text  x="162.69" y="127.5" ></text>
</g>
<g >
<title>ngx_http_header_filter (4 samples, 0.02%)</title><rect x="600.3" y="117" width="0.3" height="15.0" fill="rgb(250,138,52)" rx="2" ry="2" />
<text  x="603.31" y="127.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.01%)</title><rect x="1013.3" y="133" width="0.1" height="15.0" fill="rgb(223,139,14)" rx="2" ry="2" />
<text  x="1016.26" y="143.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (17 samples, 0.09%)</title><rect x="160.7" y="117" width="1.1" height="15.0" fill="rgb(209,114,35)" rx="2" ry="2" />
<text  x="163.69" y="127.5" ></text>
</g>
<g >
<title>check_match.isra.0 (226 samples, 1.20%)</title><rect x="134.3" y="101" width="14.1" height="15.0" fill="rgb(253,168,1)" rx="2" ry="2" />
<text  x="137.27" y="111.5" ></text>
</g>
<g >
<title>ngx_event_pipe (10 samples, 0.05%)</title><rect x="109.0" y="85" width="0.6" height="15.0" fill="rgb(246,226,31)" rx="2" ry="2" />
<text  x="111.98" y="95.5" ></text>
</g>
<g >
<title>ngx_output_chain (2 samples, 0.01%)</title><rect x="110.2" y="85" width="0.1" height="15.0" fill="rgb(223,91,25)" rx="2" ry="2" />
<text  x="113.17" y="95.5" ></text>
</g>
<g >
<title>ngx_http_log_handler (2 samples, 0.01%)</title><rect x="600.8" y="117" width="0.1" height="15.0" fill="rgb(250,44,22)" rx="2" ry="2" />
<text  x="603.75" y="127.5" ></text>
</g>
<g >
<title>ngx_unix_recv (3 samples, 0.02%)</title><rect x="10.4" y="53" width="0.2" height="15.0" fill="rgb(218,13,45)" rx="2" ry="2" />
<text  x="13.38" y="63.5" ></text>
</g>
<g >
<title>ngx_parse_http_time (4 samples, 0.02%)</title><rect x="603.5" y="117" width="0.3" height="15.0" fill="rgb(228,11,30)" rx="2" ry="2" />
<text  x="606.51" y="127.5" ></text>
</g>
<g >
<title>ngx_http_finalize_request (2 samples, 0.01%)</title><rect x="158.2" y="101" width="0.1" height="15.0" fill="rgb(217,210,43)" rx="2" ry="2" />
<text  x="161.19" y="111.5" ></text>
</g>
<g >
<title>_tr_tally (707 samples, 3.75%)</title><rect x="162.8" y="117" width="44.3" height="15.0" fill="rgb(212,12,12)" rx="2" ry="2" />
<text  x="165.82" y="127.5" >_tr_..</text>
</g>
<g >
<title>ngx_http_proxy_process_header (3 samples, 0.02%)</title><rect x="601.3" y="117" width="0.1" height="15.0" fill="rgb(241,101,3)" rx="2" ry="2" />
<text  x="604.25" y="127.5" ></text>
</g>
<g >
<title>[unknown] (1,607 samples, 8.53%)</title><rect x="10.0" y="101" width="100.6" height="15.0" fill="rgb(234,162,6)" rx="2" ry="2" />
<text  x="13.00" y="111.5" >[unknown]</text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (4 samples, 0.02%)</title><rect x="11.0" y="85" width="0.3" height="15.0" fill="rgb(244,183,42)" rx="2" ry="2" />
<text  x="14.00" y="95.5" ></text>
</g>
<g >
<title>ngx_epoll_process_events (4 samples, 0.02%)</title><rect x="1013.6" y="133" width="0.3" height="15.0" fill="rgb(220,189,33)" rx="2" ry="2" />
<text  x="1016.64" y="143.5" ></text>
</g>
<g >
<title>longest_match (2,261 samples, 12.00%)</title><rect x="456.6" y="117" width="141.6" height="15.0" fill="rgb(246,14,29)" rx="2" ry="2" />
<text  x="459.63" y="127.5" >longest_match</text>
</g>
<g >
<title>ngx_http_log_variable_getlen (3 samples, 0.02%)</title><rect x="158.7" y="101" width="0.2" height="15.0" fill="rgb(225,48,25)" rx="2" ry="2" />
<text  x="161.69" y="111.5" ></text>
</g>
<g >
<title>__GI___writev (2 samples, 0.01%)</title><rect x="10.8" y="85" width="0.1" height="15.0" fill="rgb(254,165,15)" rx="2" ry="2" />
<text  x="13.81" y="95.5" ></text>
</g>
<g >
<title>ngx_rbtree_delete (2 samples, 0.01%)</title><rect x="110.3" y="85" width="0.1" height="15.0" fill="rgb(211,154,31)" rx="2" ry="2" />
<text  x="113.29" y="95.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 0.03%)</title><rect x="161.9" y="117" width="0.3" height="15.0" fill="rgb(253,72,42)" rx="2" ry="2" />
<text  x="164.88" y="127.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (3 samples, 0.02%)</title><rect x="655.2" y="133" width="0.1" height="15.0" fill="rgb(232,42,51)" rx="2" ry="2" />
<text  x="658.16" y="143.5" ></text>
</g>
<g >
<title>ngx_http_process_request_headers (2 samples, 0.01%)</title><rect x="1014.8" y="133" width="0.1" height="15.0" fill="rgb(237,164,41)" rx="2" ry="2" />
<text  x="1017.77" y="143.5" ></text>
</g>
<g >
<title>ngx_time_update (2 samples, 0.01%)</title><rect x="110.5" y="85" width="0.1" height="15.0" fill="rgb(235,162,28)" rx="2" ry="2" />
<text  x="113.48" y="95.5" ></text>
</g>
<g >
<title>ngx_palloc (3 samples, 0.02%)</title><rect x="603.0" y="117" width="0.2" height="15.0" fill="rgb(232,18,42)" rx="2" ry="2" />
<text  x="606.01" y="127.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (47 samples, 0.25%)</title><rect x="605.2" y="133" width="2.9" height="15.0" fill="rgb(215,123,54)" rx="2" ry="2" />
<text  x="608.20" y="143.5" ></text>
</g>
<g >
<title>ngx_chain_add_copy (2 samples, 0.01%)</title><rect x="598.3" y="117" width="0.1" height="15.0" fill="rgb(235,102,5)" rx="2" ry="2" />
<text  x="601.31" y="127.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (367 samples, 1.95%)</title><rect x="110.7" y="101" width="22.9" height="15.0" fill="rgb(222,71,23)" rx="2" ry="2" />
<text  x="113.67" y="111.5" >_..</text>
</g>
<g >
<title>send_bits (2,666 samples, 14.14%)</title><rect x="1020.9" y="133" width="166.9" height="15.0" fill="rgb(218,80,29)" rx="2" ry="2" />
<text  x="1023.90" y="143.5" >send_bits</text>
</g>
<g >
<title>_tr_tally (677 samples, 3.59%)</title><rect x="609.2" y="133" width="42.4" height="15.0" fill="rgb(252,40,0)" rx="2" ry="2" />
<text  x="612.20" y="143.5" >_tr..</text>
</g>
<g >
<title>__GI___readv (5 samples, 0.03%)</title><rect x="604.8" y="133" width="0.3" height="15.0" fill="rgb(239,206,43)" rx="2" ry="2" />
<text  x="607.82" y="143.5" ></text>
</g>
<g >
<title>deflate_fast (11 samples, 0.06%)</title><rect x="148.8" y="101" width="0.7" height="15.0" fill="rgb(227,28,48)" rx="2" ry="2" />
<text  x="151.80" y="111.5" ></text>
</g>
<g >
<title>fill_window (3,126 samples, 16.59%)</title><rect x="817.6" y="133" width="195.7" height="15.0" fill="rgb(220,57,0)" rx="2" ry="2" />
<text  x="820.56" y="143.5" >fill_window</text>
</g>
<g >
<title>deflateReset (4 samples, 0.02%)</title><rect x="223.4" y="117" width="0.2" height="15.0" fill="rgb(223,29,51)" rx="2" ry="2" />
<text  x="226.36" y="127.5" ></text>
</g>
<g >
<title>ngx_event_connect_peer (3 samples, 0.02%)</title><rect x="598.6" y="117" width="0.1" height="15.0" fill="rgb(230,59,21)" rx="2" ry="2" />
<text  x="601.56" y="127.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (2 samples, 0.01%)</title><rect x="1189.9" y="133" width="0.1" height="15.0" fill="rgb(240,110,28)" rx="2" ry="2" />
<text  x="1192.87" y="143.5" ></text>
</g>
<g >
<title>scan_tree (12 samples, 0.06%)</title><rect x="604.0" y="117" width="0.8" height="15.0" fill="rgb(219,198,29)" rx="2" ry="2" />
<text  x="607.01" y="127.5" ></text>
</g>
<g >
<title>ngx_http_gzip_body_filter (15 samples, 0.08%)</title><rect x="599.3" y="117" width="1.0" height="15.0" fill="rgb(222,189,0)" rx="2" ry="2" />
<text  x="602.31" y="127.5" ></text>
</g>
<g >
<title>ngx_http_trailers_filter (2 samples, 0.01%)</title><rect x="110.0" y="85" width="0.1" height="15.0" fill="rgb(207,129,37)" rx="2" ry="2" />
<text  x="112.98" y="95.5" ></text>
</g>
<g >
<title>ngx_http_userid_filter (2 samples, 0.01%)</title><rect x="602.8" y="117" width="0.1" height="15.0" fill="rgb(232,30,4)" rx="2" ry="2" />
<text  x="605.82" y="127.5" ></text>
</g>
<g >
<title>ngx_http_proxy_copy_filter (2 samples, 0.01%)</title><rect x="109.7" y="85" width="0.2" height="15.0" fill="rgb(250,36,17)" rx="2" ry="2" />
<text  x="112.73" y="95.5" ></text>
</g>
<g >
<title>[unknown] (9,501 samples, 50.41%)</title><rect x="10.0" y="133" width="594.8" height="15.0" fill="rgb(209,58,48)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >[unknown]</text>
</g>
<g >
<title>all (18,848 samples, 100%)</title><rect x="10.0" y="165" width="1180.0" height="15.0" fill="rgb(208,209,47)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>__posix_memalign (2 samples, 0.01%)</title><rect x="608.3" y="133" width="0.2" height="15.0" fill="rgb(230,124,25)" rx="2" ry="2" />
<text  x="611.33" y="143.5" ></text>
</g>
<g >
<title>ngx_pnalloc (2 samples, 0.01%)</title><rect x="603.8" y="117" width="0.1" height="15.0" fill="rgb(213,100,51)" rx="2" ry="2" />
<text  x="606.76" y="127.5" ></text>
</g>
<g >
<title>ngx_hash_find (3 samples, 0.02%)</title><rect x="1013.9" y="133" width="0.2" height="15.0" fill="rgb(232,33,41)" rx="2" ry="2" />
<text  x="1016.89" y="143.5" ></text>
</g>
<g >
<title>compress_block (1,959 samples, 10.39%)</title><rect x="655.3" y="133" width="122.7" height="15.0" fill="rgb(217,73,17)" rx="2" ry="2" />
<text  x="658.34" y="143.5" >compress_block</text>
</g>
<g >
<title>ngx_http_upstream_connect (2 samples, 0.01%)</title><rect x="602.1" y="117" width="0.1" height="15.0" fill="rgb(209,229,31)" rx="2" ry="2" />
<text  x="605.07" y="127.5" ></text>
</g>
<g >
<title>ngx_palloc_large (5 samples, 0.03%)</title><rect x="603.2" y="117" width="0.3" height="15.0" fill="rgb(229,197,31)" rx="2" ry="2" />
<text  x="606.19" y="127.5" ></text>
</g>
<g >
<title>ngx_http_range_body_filter (2 samples, 0.01%)</title><rect x="601.4" y="117" width="0.2" height="15.0" fill="rgb(219,60,29)" rx="2" ry="2" />
<text  x="604.44" y="127.5" ></text>
</g>
<g >
<title>ngx_http_write_filter (3 samples, 0.02%)</title><rect x="1015.6" y="133" width="0.2" height="15.0" fill="rgb(212,6,17)" rx="2" ry="2" />
<text  x="1018.64" y="143.5" ></text>
</g>
<g >
<title>ngx_alloc_chain_link (2 samples, 0.01%)</title><rect x="10.6" y="69" width="0.1" height="15.0" fill="rgb(210,114,11)" rx="2" ry="2" />
<text  x="13.56" y="79.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.05%)</title><rect x="10.0" y="69" width="0.6" height="15.0" fill="rgb(234,51,21)" rx="2" ry="2" />
<text  x="13.00" y="79.5" ></text>
</g>
<g >
<title>ngx_hash_find (6 samples, 0.03%)</title><rect x="598.7" y="117" width="0.4" height="15.0" fill="rgb(227,200,37)" rx="2" ry="2" />
<text  x="601.75" y="127.5" ></text>
</g>
<g >
<title>ngx_palloc (3 samples, 0.02%)</title><rect x="1016.0" y="133" width="0.1" height="15.0" fill="rgb(240,128,5)" rx="2" ry="2" />
<text  x="1018.96" y="143.5" ></text>
</g>
<g >
<title>ngx_reusable_connection (2 samples, 0.01%)</title><rect x="10.1" y="37" width="0.1" height="15.0" fill="rgb(243,82,13)" rx="2" ry="2" />
<text  x="13.06" y="47.5" ></text>
</g>
<g >
<title>deflate (5 samples, 0.03%)</title><rect x="148.5" y="101" width="0.3" height="15.0" fill="rgb(216,167,33)" rx="2" ry="2" />
<text  x="151.48" y="111.5" ></text>
</g>
<g >
<title>crc32 (2 samples, 0.01%)</title><rect x="778.0" y="133" width="0.1" height="15.0" fill="rgb(221,221,29)" rx="2" ry="2" />
<text  x="780.99" y="143.5" ></text>
</g>
<g >
<title>longest_match (96 samples, 0.51%)</title><rect x="149.5" y="101" width="6.0" height="15.0" fill="rgb(247,52,54)" rx="2" ry="2" />
<text  x="152.49" y="111.5" ></text>
</g>
<g >
<title>memcmp@plt (39 samples, 0.21%)</title><rect x="155.5" y="101" width="2.4" height="15.0" fill="rgb(234,162,3)" rx="2" ry="2" />
<text  x="158.50" y="111.5" ></text>
</g>
<g >
<title>ngx_http_parse_request_line (2 samples, 0.01%)</title><rect x="1014.5" y="133" width="0.1" height="15.0" fill="rgb(245,132,19)" rx="2" ry="2" />
<text  x="1017.52" y="143.5" ></text>
</g>
<g >
<title>ngx_http_upstream_process_header (4 samples, 0.02%)</title><rect x="602.4" y="117" width="0.3" height="15.0" fill="rgb(208,89,1)" rx="2" ry="2" />
<text  x="605.44" y="127.5" ></text>
</g>
<g >
<title>ngx_http_limit_req_handler (2 samples, 0.01%)</title><rect x="600.6" y="117" width="0.2" height="15.0" fill="rgb(218,128,49)" rx="2" ry="2" />
<text  x="603.63" y="127.5" ></text>
</g>
<g >
<title>ngx_http_trailers_filter (2 samples, 0.01%)</title><rect x="1015.1" y="133" width="0.2" height="15.0" fill="rgb(206,226,47)" rx="2" ry="2" />
<text  x="1018.14" y="143.5" ></text>
</g>
<g >
<title>build_tree (12 samples, 0.06%)</title><rect x="207.1" y="117" width="0.7" height="15.0" fill="rgb(205,217,8)" rx="2" ry="2" />
<text  x="210.08" y="127.5" ></text>
</g>
<g >
<title>_tr_tally (2 samples, 0.01%)</title><rect x="134.1" y="101" width="0.1" height="15.0" fill="rgb(205,134,50)" rx="2" ry="2" />
<text  x="137.09" y="111.5" ></text>
</g>
<g >
<title>ngx_http_upstream_wr_check_broken_connection (2 samples, 0.01%)</title><rect x="1015.5" y="133" width="0.1" height="15.0" fill="rgb(252,132,28)" rx="2" ry="2" />
<text  x="1018.52" y="143.5" ></text>
</g>
</g>
</svg>
